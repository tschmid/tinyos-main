/*
 * Copyright (c) 2011 The Regents of the University  of California.
 * All rights reserved."
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * - Redistributions of source code must retain the above copyright
 *   notice, this list of conditions and the following disclaimer.
 * - Redistributions in binary form must reproduce the above copyright
 *   notice, this list of conditions and the following disclaimer in the
 *   documentation and/or other materials provided with the
 *   distribution.
 * - Neither the name of the copyright holders nor the names of
 *   its contributors may be used to endorse or promote products derived
 *   from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

/**
 * ADE7753 Driver
 */

#include <ADE7753.h>

module ADE7753P
{
  provides interface Init;
  provides interface StdControl;
  provides interface ADE7753;

  uses interface Resource;

  uses interface SpiPacket;
  uses interface HplMsp430GeneralIO as SPIFRM;
  uses interface Leds;
} implementation {

  enum {
    STATE_IDLE,
    STATE_STARTING,
    STATE_STOPPING,
    STATE_STOPPED,
    STATE_GETREG,
    STATE_SETREG,
    STATE_ERROR
  };

  uint8_t mSPIRxBuf[4],mSPITxBuf[4];
  uint8_t mSPITxLen;
  uint8_t mSPIRxLen;

  uint8_t mState;
  // bool misInited = FALSE;
  // norace error_t mSSError;

  command error_t Init.init() {
    atomic {
      mState = STATE_STOPPED;

      // Control CS pin manually
      call SPIFRM.makeOutput();
      call SPIFRM.set();
    }
    return SUCCESS;
  }

  command error_t StdControl.start() {

    atomic {
      if (mState == STATE_STOPPED) { 
        mState = STATE_IDLE;
      } else {
        return EALREADY;
      }
    }
    /* set initialization register values here
       mSPITxBuf[0] = LIS3L02DQ_CTRL_REG1;
       mSPITxBuf[1] = 0;
       mSPITxBuf[1] = (LIS3L01DQ_CTRL_REG1_PD(1) | LIS3L01DQ_CTRL_REG1_XEN | LIS3L01DQ_CTRL_REG1_YEN | LIS3L01DQ_CTRL_REG1_ZEN);
       call SPIFRM.clr(); // CS LOW
       error = call SpiPacket.send(mSPITxBuf,mSPIRxBuf,2);
     */
    // atomic mState = STATE_IDLE;

    return SUCCESS;
  }

  command error_t StdControl.stop() {

    atomic {
      if (mState == STATE_IDLE) {
        mState = STATE_STOPPED;
      } else { 
        return EBUSY;
      }
    }

    /* stopping conditions
       mSPITxBuf[0] = LIS3L02DQ_CTRL_REG1;
       mSPITxBuf[1] = 0;
       mSPITxBuf[1] = (LIS3L01DQ_CTRL_REG1_PD(0));
       call SPIFRM.clr(); // CS LOW
       error = call SpiPacket.send(mSPITxBuf,mSPIRxBuf,2);
     */
    call SPIFRM.set();

    return SUCCESS;
  }


  event void Resource.granted() {
    atomic {
      switch(mState) {
        case STATE_GETREG:
          // call Leds.led0Toggle();
          call SPIFRM.clr(); // CS LOW
          if (call SpiPacket.send(mSPITxBuf,mSPIRxBuf,mSPITxLen) != SUCCESS) {
            signal ADE7753.getRegDone(FAIL, 0, 0, 0);
            goto fail;
          }
          break;
        case STATE_SETREG:
          // call Leds.led0On();
          call SPIFRM.clr(); // CS LOW
          if (call SpiPacket.send(mSPITxBuf,mSPIRxBuf,mSPITxLen) != SUCCESS) {
            signal ADE7753.setRegDone(FAIL, 0, 0, 0);
            goto fail;
          }
          break;
        default:
          goto fail;
      }
      return;

fail:
      call Resource.release();
      mState = STATE_IDLE;
    }
  }

  // Here I'm forcing 24 bit receive data
  command error_t ADE7753.getReg(uint8_t regAddr, uint8_t len) {
    error_t error = SUCCESS;

    atomic {
      if (mState != STATE_IDLE) {
        return FAIL;
      } else {
        mState = STATE_GETREG;
      }
    }

    /*
    //if((regAddr < 0x16) || (regAddr > 0x2F)) {
    if(regAddr > 0x3F) {
    error = EINVAL;
    return error;
    }
     */

    mSPITxBuf[0] = regAddr;
    mSPITxBuf[1] = 0;
    mSPITxBuf[2] = 0;
    mSPITxBuf[3] = 0;

    mSPIRxBuf[0] = 0;
    mSPIRxBuf[1] = 0;
    mSPIRxBuf[2] = 0;
    mSPIRxBuf[3] = 0;

    mSPIRxLen = len;

    //  atomic mState = STATE_GETREG;

    error = call Resource.request();

    /*
       call SPIFRM.clr(); // CS LOW

       error = call SpiPacket.send(mSPITxBuf,mSPIRxBuf,4);
    // call Leds.led0On();

     */

    return error;
  }


  // here I'm forcing 24bit of val during a write
  command error_t ADE7753.setReg(uint8_t regAddr, uint8_t len, uint32_t val) {
    // here I'm forcing 8bit of val during a write
    // command error_t ADE7753.setReg(uint8_t regAddr, uint8_t val) {
    error_t error = SUCCESS;

    atomic {
      if (mState != STATE_IDLE) {
        return FAIL;
      } else {
        mState = STATE_SETREG;
      }
    }

    // if((regAddr < 0x16) || (regAddr > 0x2F)) {
    /*
       if(regAddr > 0x3F) {
       error = EINVAL;
       return error;
       }
     */

    // call Leds.led0On();

    mSPITxBuf[0] = regAddr | (1 << 7); // set the WRITE bit

    switch (len) {
      case 2:
        mSPITxBuf[1] = (uint8_t) val;
        break;
      case 3:
        mSPITxBuf[1] = (uint8_t) (val>>8);
        mSPITxBuf[2] = (uint8_t) val;
        break;
      case 4:
        mSPITxBuf[1] = (uint8_t) (val>>16);
        mSPITxBuf[2] = (uint8_t) (val>>8);
        mSPITxBuf[3] = (uint8_t) val;
        break;
    }

    mSPITxLen = len;

    //  call Leds.led0On();

    //  atomic mState = STATE_SETREG;

    error = call Resource.request();
    /*
       call SPIFRM.clr(); // CS LOW
       error = call SpiPacket.send(mSPITxBuf,mSPIRxBuf,2);  
     */
    return error;
  }

  async event void SpiPacket.sendDone(uint8_t* txBuf, uint8_t* rxBuf, uint16_t len, error_t spi_error) {
    uint32_t val;
    error_t error = spi_error;
    uint8_t *buf = txBuf;

    if (spi_error != SUCCESS)
      call Leds.led0Toggle();
    // call Leds.led1On();

    call SPIFRM.set(); // CS HIGH

    atomic {
      if (mState == STATE_GETREG) {
        buf = rxBuf;
      }

      switch (len) {
        case 2:
          val = buf[1];
          break;
        case 3:
          val = ((uint32_t)buf[1])<<8 | buf[2];
          break;
        case 4:
          val = ((uint32_t)buf[1])<<16 | ((uint32_t)buf[2])<<8 | buf[3];
          break;
        default:
          val = 0xF0F0F0F0;
          break;
      }

      switch (mState) {
        case STATE_GETREG:
          signal ADE7753.getRegDone(error, (txBuf[0] & 0x7F), val, len);
          break;
        case STATE_SETREG:
          signal ADE7753.setRegDone(error, (txBuf[0] & 0x7F), val, len);
          break;
          /*
             case STATE_STARTING:
             mState = STATE_IDLE;
             call SPIFRM.set();
             post StartDone();
             break;
             case STATE_STOPPING:
             mState = STATE_STOPPED;
             post StopDone();
           */
        default:
          break;
      }

      mState = STATE_IDLE;
    }
    call Resource.release();
    return;
  }
  }
